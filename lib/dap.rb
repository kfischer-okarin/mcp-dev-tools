ProtocolMessage = Data.define(:seq, :type)
CancelArguments = Data.define(:requestId, :progressId)
RunInTerminalRequestArguments = Data.define(:kind, :title, :cwd, :args, :env, :argsCanBeInterpretedByShell)
StartDebuggingRequestArguments = Data.define(:configuration, :request)
InitializeRequestArguments = Data.define(:clientID, :clientName, :adapterID, :locale, :linesStartAt1, :columnsStartAt1, :pathFormat, :supportsVariableType, :supportsVariablePaging, :supportsRunInTerminalRequest, :supportsMemoryReferences, :supportsProgressReporting, :supportsInvalidatedEvent, :supportsMemoryEvent, :supportsArgsCanBeInterpretedByShell, :supportsStartDebuggingRequest, :supportsANSIStyling)
LaunchRequestArguments = Data.define(:noDebug, :__restart)
AttachRequestArguments = Data.define(:__restart)
RestartArguments = Data.define(:arguments)
DisconnectArguments = Data.define(:restart, :terminateDebuggee, :suspendDebuggee)
TerminateArguments = Data.define(:restart)
BreakpointLocationsArguments = Data.define(:source, :line, :column, :endLine, :endColumn)
SetBreakpointsArguments = Data.define(:source, :breakpoints, :lines, :sourceModified)
SetFunctionBreakpointsArguments = Data.define(:breakpoints)
SetExceptionBreakpointsArguments = Data.define(:filters, :filterOptions, :exceptionOptions)
DataBreakpointInfoArguments = Data.define(:variablesReference, :name, :frameId, :bytes, :asAddress, :mode)
SetDataBreakpointsArguments = Data.define(:breakpoints)
SetInstructionBreakpointsArguments = Data.define(:breakpoints)
ContinueArguments = Data.define(:threadId, :singleThread)
NextArguments = Data.define(:threadId, :singleThread, :granularity)
StepInArguments = Data.define(:threadId, :singleThread, :targetId, :granularity)
StepOutArguments = Data.define(:threadId, :singleThread, :granularity)
StepBackArguments = Data.define(:threadId, :singleThread, :granularity)
ReverseContinueArguments = Data.define(:threadId, :singleThread)
RestartFrameArguments = Data.define(:frameId)
GotoArguments = Data.define(:threadId, :targetId)
PauseArguments = Data.define(:threadId)
StackTraceArguments = Data.define(:threadId, :startFrame, :levels, :format)
ScopesArguments = Data.define(:frameId)
VariablesArguments = Data.define(:variablesReference, :filter, :start, :count, :format)
SetVariableArguments = Data.define(:variablesReference, :name, :value, :format)
SourceArguments = Data.define(:source, :sourceReference)
TerminateThreadsArguments = Data.define(:threadIds)
ModulesArguments = Data.define(:startModule, :moduleCount)
EvaluateArguments = Data.define(:expression, :frameId, :line, :column, :source, :context, :format)
SetExpressionArguments = Data.define(:expression, :value, :frameId, :format)
StepInTargetsArguments = Data.define(:frameId)
GotoTargetsArguments = Data.define(:source, :line, :column)
CompletionsArguments = Data.define(:frameId, :text, :column, :line)
ExceptionInfoArguments = Data.define(:threadId)
ReadMemoryArguments = Data.define(:memoryReference, :offset, :count)
WriteMemoryArguments = Data.define(:memoryReference, :offset, :allowPartial, :data)
DisassembleArguments = Data.define(:memoryReference, :offset, :instructionOffset, :instructionCount, :resolveSymbols)
LocationsArguments = Data.define(:locationReference)
Capabilities = Data.define(:supportsConfigurationDoneRequest, :supportsFunctionBreakpoints, :supportsConditionalBreakpoints, :supportsHitConditionalBreakpoints, :supportsEvaluateForHovers, :exceptionBreakpointFilters, :supportsStepBack, :supportsSetVariable, :supportsRestartFrame, :supportsGotoTargetsRequest, :supportsStepInTargetsRequest, :supportsCompletionsRequest, :completionTriggerCharacters, :supportsModulesRequest, :additionalModuleColumns, :supportedChecksumAlgorithms, :supportsRestartRequest, :supportsExceptionOptions, :supportsValueFormattingOptions, :supportsExceptionInfoRequest, :supportTerminateDebuggee, :supportSuspendDebuggee, :supportsDelayedStackTraceLoading, :supportsLoadedSourcesRequest, :supportsLogPoints, :supportsTerminateThreadsRequest, :supportsSetExpression, :supportsTerminateRequest, :supportsDataBreakpoints, :supportsReadMemoryRequest, :supportsWriteMemoryRequest, :supportsDisassembleRequest, :supportsCancelRequest, :supportsBreakpointLocationsRequest, :supportsClipboardContext, :supportsSteppingGranularity, :supportsInstructionBreakpoints, :supportsExceptionFilterOptions, :supportsSingleThreadExecutionRequests, :supportsDataBreakpointBytes, :breakpointModes, :supportsANSIStyling)
ExceptionBreakpointsFilter = Data.define(:filter, :label, :description, :default, :supportsCondition, :conditionDescription)
Message = Data.define(:id, :format, :variables, :sendTelemetry, :showUser, :url, :urlLabel)
Module = Data.define(:id, :name, :path, :isOptimized, :isUserCode, :version, :symbolStatus, :symbolFilePath, :dateTimeStamp, :addressRange)
ColumnDescriptor = Data.define(:attributeName, :label, :format, :type, :width)
Thread = Data.define(:id, :name)
Source = Data.define(:name, :path, :sourceReference, :presentationHint, :origin, :sources, :adapterData, :checksums)
StackFrame = Data.define(:id, :name, :source, :line, :column, :endLine, :endColumn, :canRestart, :instructionPointerReference, :moduleId, :presentationHint)
Scope = Data.define(:name, :presentationHint, :variablesReference, :namedVariables, :indexedVariables, :expensive, :source, :line, :column, :endLine, :endColumn)
Variable = Data.define(:name, :value, :type, :presentationHint, :evaluateName, :variablesReference, :namedVariables, :indexedVariables, :memoryReference, :declarationLocationReference, :valueLocationReference)
VariablePresentationHint = Data.define(:kind, :attributes, :visibility, :lazy)
BreakpointLocation = Data.define(:line, :column, :endLine, :endColumn)
SourceBreakpoint = Data.define(:line, :column, :condition, :hitCondition, :logMessage, :mode)
FunctionBreakpoint = Data.define(:name, :condition, :hitCondition)
DataBreakpoint = Data.define(:dataId, :accessType, :condition, :hitCondition)
InstructionBreakpoint = Data.define(:instructionReference, :offset, :condition, :hitCondition, :mode)
Breakpoint = Data.define(:id, :verified, :message, :source, :line, :column, :endLine, :endColumn, :instructionReference, :offset, :reason)
StepInTarget = Data.define(:id, :label, :line, :column, :endLine, :endColumn)
GotoTarget = Data.define(:id, :label, :line, :column, :endLine, :endColumn, :instructionPointerReference)
CompletionItem = Data.define(:label, :text, :sortText, :detail, :type, :start, :length, :selectionStart, :selectionLength)
Checksum = Data.define(:algorithm, :checksum)
ValueFormat = Data.define(:hex)
ExceptionFilterOptions = Data.define(:filterId, :condition, :mode)
ExceptionOptions = Data.define(:path, :breakMode)
ExceptionPathSegment = Data.define(:negate, :names)
ExceptionDetails = Data.define(:message, :typeName, :fullTypeName, :evaluateName, :stackTrace, :innerException)
DisassembledInstruction = Data.define(:address, :instructionBytes, :instruction, :symbol, :location, :line, :column, :endLine, :endColumn, :presentationHint)
BreakpointMode = Data.define(:mode, :label, :description, :appliesTo)
