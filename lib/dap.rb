ProtocolMessage = Data.define(:seq, :type)
Request = Data.define(:seq, :type, :command, :arguments)
Event = Data.define(:seq, :type, :event, :body)
Response = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ErrorResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
CancelRequest = Data.define(:seq, :type, :command, :arguments)
CancelArguments = Data.define(:request_id, :progress_id)
CancelResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
InitializedEvent = Data.define(:seq, :type, :event, :body)
StoppedEvent = Data.define(:seq, :type, :event, :body)
ContinuedEvent = Data.define(:seq, :type, :event, :body)
ExitedEvent = Data.define(:seq, :type, :event, :body)
TerminatedEvent = Data.define(:seq, :type, :event, :body)
ThreadEvent = Data.define(:seq, :type, :event, :body)
OutputEvent = Data.define(:seq, :type, :event, :body)
BreakpointEvent = Data.define(:seq, :type, :event, :body)
ModuleEvent = Data.define(:seq, :type, :event, :body)
LoadedSourceEvent = Data.define(:seq, :type, :event, :body)
ProcessEvent = Data.define(:seq, :type, :event, :body)
CapabilitiesEvent = Data.define(:seq, :type, :event, :body)
ProgressStartEvent = Data.define(:seq, :type, :event, :body)
ProgressUpdateEvent = Data.define(:seq, :type, :event, :body)
ProgressEndEvent = Data.define(:seq, :type, :event, :body)
InvalidatedEvent = Data.define(:seq, :type, :event, :body)
MemoryEvent = Data.define(:seq, :type, :event, :body)
RunInTerminalRequest = Data.define(:seq, :type, :command, :arguments)
RunInTerminalRequestArguments = Data.define(:kind, :title, :cwd, :args, :env, :args_can_be_interpreted_by_shell)
RunInTerminalResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
StartDebuggingRequest = Data.define(:seq, :type, :command, :arguments)
StartDebuggingRequestArguments = Data.define(:configuration, :request)
StartDebuggingResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
InitializeRequest = Data.define(:seq, :type, :command, :arguments)
InitializeRequestArguments = Data.define(:client_id, :client_name, :adapter_id, :locale, :lines_start_at1, :columns_start_at1, :path_format, :supports_variable_type, :supports_variable_paging, :supports_run_in_terminal_request, :supports_memory_references, :supports_progress_reporting, :supports_invalidated_event, :supports_memory_event, :supports_args_can_be_interpreted_by_shell, :supports_start_debugging_request, :supports_ansi_styling)
InitializeResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ConfigurationDoneRequest = Data.define(:seq, :type, :command, :arguments)
ConfigurationDoneResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
LaunchRequest = Data.define(:seq, :type, :command, :arguments)
LaunchRequestArguments = Data.define(:no_debug, :__restart)
LaunchResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
AttachRequest = Data.define(:seq, :type, :command, :arguments)
AttachRequestArguments = Data.define(:__restart)
AttachResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
RestartRequest = Data.define(:seq, :type, :command, :arguments)
RestartArguments = Data.define(:arguments)
RestartResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
DisconnectRequest = Data.define(:seq, :type, :command, :arguments)
DisconnectArguments = Data.define(:restart, :terminate_debuggee, :suspend_debuggee)
DisconnectResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
TerminateRequest = Data.define(:seq, :type, :command, :arguments)
TerminateArguments = Data.define(:restart)
TerminateResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
BreakpointLocationsRequest = Data.define(:seq, :type, :command, :arguments)
BreakpointLocationsArguments = Data.define(:source, :line, :column, :end_line, :end_column)
BreakpointLocationsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SetBreakpointsRequest = Data.define(:seq, :type, :command, :arguments)
SetBreakpointsArguments = Data.define(:source, :breakpoints, :lines, :source_modified)
SetBreakpointsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SetFunctionBreakpointsRequest = Data.define(:seq, :type, :command, :arguments)
SetFunctionBreakpointsArguments = Data.define(:breakpoints)
SetFunctionBreakpointsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SetExceptionBreakpointsRequest = Data.define(:seq, :type, :command, :arguments)
SetExceptionBreakpointsArguments = Data.define(:filters, :filter_options, :exception_options)
SetExceptionBreakpointsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
DataBreakpointInfoRequest = Data.define(:seq, :type, :command, :arguments)
DataBreakpointInfoArguments = Data.define(:variables_reference, :name, :frame_id, :bytes, :as_address, :mode)
DataBreakpointInfoResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SetDataBreakpointsRequest = Data.define(:seq, :type, :command, :arguments)
SetDataBreakpointsArguments = Data.define(:breakpoints)
SetDataBreakpointsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SetInstructionBreakpointsRequest = Data.define(:seq, :type, :command, :arguments)
SetInstructionBreakpointsArguments = Data.define(:breakpoints)
SetInstructionBreakpointsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ContinueRequest = Data.define(:seq, :type, :command, :arguments)
ContinueArguments = Data.define(:thread_id, :single_thread)
ContinueResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
NextRequest = Data.define(:seq, :type, :command, :arguments)
NextArguments = Data.define(:thread_id, :single_thread, :granularity)
NextResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
StepInRequest = Data.define(:seq, :type, :command, :arguments)
StepInArguments = Data.define(:thread_id, :single_thread, :target_id, :granularity)
StepInResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
StepOutRequest = Data.define(:seq, :type, :command, :arguments)
StepOutArguments = Data.define(:thread_id, :single_thread, :granularity)
StepOutResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
StepBackRequest = Data.define(:seq, :type, :command, :arguments)
StepBackArguments = Data.define(:thread_id, :single_thread, :granularity)
StepBackResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ReverseContinueRequest = Data.define(:seq, :type, :command, :arguments)
ReverseContinueArguments = Data.define(:thread_id, :single_thread)
ReverseContinueResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
RestartFrameRequest = Data.define(:seq, :type, :command, :arguments)
RestartFrameArguments = Data.define(:frame_id)
RestartFrameResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
GotoRequest = Data.define(:seq, :type, :command, :arguments)
GotoArguments = Data.define(:thread_id, :target_id)
GotoResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
PauseRequest = Data.define(:seq, :type, :command, :arguments)
PauseArguments = Data.define(:thread_id)
PauseResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
StackTraceRequest = Data.define(:seq, :type, :command, :arguments)
StackTraceArguments = Data.define(:thread_id, :start_frame, :levels, :format)
StackTraceResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ScopesRequest = Data.define(:seq, :type, :command, :arguments)
ScopesArguments = Data.define(:frame_id)
ScopesResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
VariablesRequest = Data.define(:seq, :type, :command, :arguments)
VariablesArguments = Data.define(:variables_reference, :filter, :start, :count, :format)
VariablesResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SetVariableRequest = Data.define(:seq, :type, :command, :arguments)
SetVariableArguments = Data.define(:variables_reference, :name, :value, :format)
SetVariableResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SourceRequest = Data.define(:seq, :type, :command, :arguments)
SourceArguments = Data.define(:source, :source_reference)
SourceResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ThreadsRequest = Data.define(:seq, :type, :command, :arguments)
ThreadsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
TerminateThreadsRequest = Data.define(:seq, :type, :command, :arguments)
TerminateThreadsArguments = Data.define(:thread_ids)
TerminateThreadsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ModulesRequest = Data.define(:seq, :type, :command, :arguments)
ModulesArguments = Data.define(:start_module, :module_count)
ModulesResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
LoadedSourcesRequest = Data.define(:seq, :type, :command, :arguments)
LoadedSourcesResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
EvaluateRequest = Data.define(:seq, :type, :command, :arguments)
EvaluateArguments = Data.define(:expression, :frame_id, :line, :column, :source, :context, :format)
EvaluateResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
SetExpressionRequest = Data.define(:seq, :type, :command, :arguments)
SetExpressionArguments = Data.define(:expression, :value, :frame_id, :format)
SetExpressionResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
StepInTargetsRequest = Data.define(:seq, :type, :command, :arguments)
StepInTargetsArguments = Data.define(:frame_id)
StepInTargetsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
GotoTargetsRequest = Data.define(:seq, :type, :command, :arguments)
GotoTargetsArguments = Data.define(:source, :line, :column)
GotoTargetsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
CompletionsRequest = Data.define(:seq, :type, :command, :arguments)
CompletionsArguments = Data.define(:frame_id, :text, :column, :line)
CompletionsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ExceptionInfoRequest = Data.define(:seq, :type, :command, :arguments)
ExceptionInfoArguments = Data.define(:thread_id)
ExceptionInfoResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
ReadMemoryRequest = Data.define(:seq, :type, :command, :arguments)
ReadMemoryArguments = Data.define(:memory_reference, :offset, :count)
ReadMemoryResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
WriteMemoryRequest = Data.define(:seq, :type, :command, :arguments)
WriteMemoryArguments = Data.define(:memory_reference, :offset, :allow_partial, :data)
WriteMemoryResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
DisassembleRequest = Data.define(:seq, :type, :command, :arguments)
DisassembleArguments = Data.define(:memory_reference, :offset, :instruction_offset, :instruction_count, :resolve_symbols)
DisassembleResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
LocationsRequest = Data.define(:seq, :type, :command, :arguments)
LocationsArguments = Data.define(:location_reference)
LocationsResponse = Data.define(:seq, :type, :request_seq, :success, :command, :message, :body)
Capabilities = Data.define(:supports_configuration_done_request, :supports_function_breakpoints, :supports_conditional_breakpoints, :supports_hit_conditional_breakpoints, :supports_evaluate_for_hovers, :exception_breakpoint_filters, :supports_step_back, :supports_set_variable, :supports_restart_frame, :supports_goto_targets_request, :supports_step_in_targets_request, :supports_completions_request, :completion_trigger_characters, :supports_modules_request, :additional_module_columns, :supported_checksum_algorithms, :supports_restart_request, :supports_exception_options, :supports_value_formatting_options, :supports_exception_info_request, :support_terminate_debuggee, :support_suspend_debuggee, :supports_delayed_stack_trace_loading, :supports_loaded_sources_request, :supports_log_points, :supports_terminate_threads_request, :supports_set_expression, :supports_terminate_request, :supports_data_breakpoints, :supports_read_memory_request, :supports_write_memory_request, :supports_disassemble_request, :supports_cancel_request, :supports_breakpoint_locations_request, :supports_clipboard_context, :supports_stepping_granularity, :supports_instruction_breakpoints, :supports_exception_filter_options, :supports_single_thread_execution_requests, :supports_data_breakpoint_bytes, :breakpoint_modes, :supports_ansi_styling)
ExceptionBreakpointsFilter = Data.define(:filter, :label, :description, :default, :supports_condition, :condition_description)
Message = Data.define(:id, :format, :variables, :send_telemetry, :show_user, :url, :url_label)
Module = Data.define(:id, :name, :path, :is_optimized, :is_user_code, :version, :symbol_status, :symbol_file_path, :date_time_stamp, :address_range)
ColumnDescriptor = Data.define(:attribute_name, :label, :format, :type, :width)
Thread = Data.define(:id, :name)
Source = Data.define(:name, :path, :source_reference, :presentation_hint, :origin, :sources, :adapter_data, :checksums)
StackFrame = Data.define(:id, :name, :source, :line, :column, :end_line, :end_column, :can_restart, :instruction_pointer_reference, :module_id, :presentation_hint)
Scope = Data.define(:name, :presentation_hint, :variables_reference, :named_variables, :indexed_variables, :expensive, :source, :line, :column, :end_line, :end_column)
Variable = Data.define(:name, :value, :type, :presentation_hint, :evaluate_name, :variables_reference, :named_variables, :indexed_variables, :memory_reference, :declaration_location_reference, :value_location_reference)
VariablePresentationHint = Data.define(:kind, :attributes, :visibility, :lazy)
BreakpointLocation = Data.define(:line, :column, :end_line, :end_column)
SourceBreakpoint = Data.define(:line, :column, :condition, :hit_condition, :log_message, :mode)
FunctionBreakpoint = Data.define(:name, :condition, :hit_condition)
DataBreakpoint = Data.define(:data_id, :access_type, :condition, :hit_condition)
InstructionBreakpoint = Data.define(:instruction_reference, :offset, :condition, :hit_condition, :mode)
Breakpoint = Data.define(:id, :verified, :message, :source, :line, :column, :end_line, :end_column, :instruction_reference, :offset, :reason)
StepInTarget = Data.define(:id, :label, :line, :column, :end_line, :end_column)
GotoTarget = Data.define(:id, :label, :line, :column, :end_line, :end_column, :instruction_pointer_reference)
CompletionItem = Data.define(:label, :text, :sort_text, :detail, :type, :start, :length, :selection_start, :selection_length)
Checksum = Data.define(:algorithm, :checksum)
ValueFormat = Data.define(:hex)
StackFrameFormat = Data.define(:hex, :parameters, :parameter_types, :parameter_names, :parameter_values, :line, :module, :include_all)
ExceptionFilterOptions = Data.define(:filter_id, :condition, :mode)
ExceptionOptions = Data.define(:path, :break_mode)
ExceptionPathSegment = Data.define(:negate, :names)
ExceptionDetails = Data.define(:message, :type_name, :full_type_name, :evaluate_name, :stack_trace, :inner_exception)
DisassembledInstruction = Data.define(:address, :instruction_bytes, :instruction, :symbol, :location, :line, :column, :end_line, :end_column, :presentation_hint)
BreakpointMode = Data.define(:mode, :label, :description, :applies_to)