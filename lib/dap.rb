ProtocolMessage = Data.define(:seq, :type)
CancelArguments = Data.define(:request_id, :progress_id)
RunInTerminalRequestArguments = Data.define(:kind, :title, :cwd, :args, :env, :args_can_be_interpreted_by_shell)
StartDebuggingRequestArguments = Data.define(:configuration, :request)
InitializeRequestArguments = Data.define(:client_id, :client_name, :adapter_id, :locale, :lines_start_at1, :columns_start_at1, :path_format, :supports_variable_type, :supports_variable_paging, :supports_run_in_terminal_request, :supports_memory_references, :supports_progress_reporting, :supports_invalidated_event, :supports_memory_event, :supports_args_can_be_interpreted_by_shell, :supports_start_debugging_request, :supports_ansi_styling)
LaunchRequestArguments = Data.define(:no_debug, :__restart)
AttachRequestArguments = Data.define(:__restart)
RestartArguments = Data.define(:arguments)
DisconnectArguments = Data.define(:restart, :terminate_debuggee, :suspend_debuggee)
TerminateArguments = Data.define(:restart)
BreakpointLocationsArguments = Data.define(:source, :line, :column, :end_line, :end_column)
SetBreakpointsArguments = Data.define(:source, :breakpoints, :lines, :source_modified)
SetFunctionBreakpointsArguments = Data.define(:breakpoints)
SetExceptionBreakpointsArguments = Data.define(:filters, :filter_options, :exception_options)
DataBreakpointInfoArguments = Data.define(:variables_reference, :name, :frame_id, :bytes, :as_address, :mode)
SetDataBreakpointsArguments = Data.define(:breakpoints)
SetInstructionBreakpointsArguments = Data.define(:breakpoints)
ContinueArguments = Data.define(:thread_id, :single_thread)
NextArguments = Data.define(:thread_id, :single_thread, :granularity)
StepInArguments = Data.define(:thread_id, :single_thread, :target_id, :granularity)
StepOutArguments = Data.define(:thread_id, :single_thread, :granularity)
StepBackArguments = Data.define(:thread_id, :single_thread, :granularity)
ReverseContinueArguments = Data.define(:thread_id, :single_thread)
RestartFrameArguments = Data.define(:frame_id)
GotoArguments = Data.define(:thread_id, :target_id)
PauseArguments = Data.define(:thread_id)
StackTraceArguments = Data.define(:thread_id, :start_frame, :levels, :format)
ScopesArguments = Data.define(:frame_id)
VariablesArguments = Data.define(:variables_reference, :filter, :start, :count, :format)
SetVariableArguments = Data.define(:variables_reference, :name, :value, :format)
SourceArguments = Data.define(:source, :source_reference)
TerminateThreadsArguments = Data.define(:thread_ids)
ModulesArguments = Data.define(:start_module, :module_count)
EvaluateArguments = Data.define(:expression, :frame_id, :line, :column, :source, :context, :format)
SetExpressionArguments = Data.define(:expression, :value, :frame_id, :format)
StepInTargetsArguments = Data.define(:frame_id)
GotoTargetsArguments = Data.define(:source, :line, :column)
CompletionsArguments = Data.define(:frame_id, :text, :column, :line)
ExceptionInfoArguments = Data.define(:thread_id)
ReadMemoryArguments = Data.define(:memory_reference, :offset, :count)
WriteMemoryArguments = Data.define(:memory_reference, :offset, :allow_partial, :data)
DisassembleArguments = Data.define(:memory_reference, :offset, :instruction_offset, :instruction_count, :resolve_symbols)
LocationsArguments = Data.define(:location_reference)
Capabilities = Data.define(:supports_configuration_done_request, :supports_function_breakpoints, :supports_conditional_breakpoints, :supports_hit_conditional_breakpoints, :supports_evaluate_for_hovers, :exception_breakpoint_filters, :supports_step_back, :supports_set_variable, :supports_restart_frame, :supports_goto_targets_request, :supports_step_in_targets_request, :supports_completions_request, :completion_trigger_characters, :supports_modules_request, :additional_module_columns, :supported_checksum_algorithms, :supports_restart_request, :supports_exception_options, :supports_value_formatting_options, :supports_exception_info_request, :support_terminate_debuggee, :support_suspend_debuggee, :supports_delayed_stack_trace_loading, :supports_loaded_sources_request, :supports_log_points, :supports_terminate_threads_request, :supports_set_expression, :supports_terminate_request, :supports_data_breakpoints, :supports_read_memory_request, :supports_write_memory_request, :supports_disassemble_request, :supports_cancel_request, :supports_breakpoint_locations_request, :supports_clipboard_context, :supports_stepping_granularity, :supports_instruction_breakpoints, :supports_exception_filter_options, :supports_single_thread_execution_requests, :supports_data_breakpoint_bytes, :breakpoint_modes, :supports_ansi_styling)
ExceptionBreakpointsFilter = Data.define(:filter, :label, :description, :default, :supports_condition, :condition_description)
Message = Data.define(:id, :format, :variables, :send_telemetry, :show_user, :url, :url_label)
Module = Data.define(:id, :name, :path, :is_optimized, :is_user_code, :version, :symbol_status, :symbol_file_path, :date_time_stamp, :address_range)
ColumnDescriptor = Data.define(:attribute_name, :label, :format, :type, :width)
Thread = Data.define(:id, :name)
Source = Data.define(:name, :path, :source_reference, :presentation_hint, :origin, :sources, :adapter_data, :checksums)
StackFrame = Data.define(:id, :name, :source, :line, :column, :end_line, :end_column, :can_restart, :instruction_pointer_reference, :module_id, :presentation_hint)
Scope = Data.define(:name, :presentation_hint, :variables_reference, :named_variables, :indexed_variables, :expensive, :source, :line, :column, :end_line, :end_column)
Variable = Data.define(:name, :value, :type, :presentation_hint, :evaluate_name, :variables_reference, :named_variables, :indexed_variables, :memory_reference, :declaration_location_reference, :value_location_reference)
VariablePresentationHint = Data.define(:kind, :attributes, :visibility, :lazy)
BreakpointLocation = Data.define(:line, :column, :end_line, :end_column)
SourceBreakpoint = Data.define(:line, :column, :condition, :hit_condition, :log_message, :mode)
FunctionBreakpoint = Data.define(:name, :condition, :hit_condition)
DataBreakpoint = Data.define(:data_id, :access_type, :condition, :hit_condition)
InstructionBreakpoint = Data.define(:instruction_reference, :offset, :condition, :hit_condition, :mode)
Breakpoint = Data.define(:id, :verified, :message, :source, :line, :column, :end_line, :end_column, :instruction_reference, :offset, :reason)
StepInTarget = Data.define(:id, :label, :line, :column, :end_line, :end_column)
GotoTarget = Data.define(:id, :label, :line, :column, :end_line, :end_column, :instruction_pointer_reference)
CompletionItem = Data.define(:label, :text, :sort_text, :detail, :type, :start, :length, :selection_start, :selection_length)
Checksum = Data.define(:algorithm, :checksum)
ValueFormat = Data.define(:hex)
ExceptionFilterOptions = Data.define(:filter_id, :condition, :mode)
ExceptionOptions = Data.define(:path, :break_mode)
ExceptionPathSegment = Data.define(:negate, :names)
ExceptionDetails = Data.define(:message, :type_name, :full_type_name, :evaluate_name, :stack_trace, :inner_exception)
DisassembledInstruction = Data.define(:address, :instruction_bytes, :instruction, :symbol, :location, :line, :column, :end_line, :end_column, :presentation_hint)
BreakpointMode = Data.define(:mode, :label, :description, :applies_to)